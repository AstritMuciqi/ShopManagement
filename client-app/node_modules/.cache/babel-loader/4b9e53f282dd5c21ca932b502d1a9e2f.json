{"ast":null,"code":"var _jsxFileName = \"D:\\\\Semestri-IV\\\\Programim\\\\Shop Management\\\\client-app\\\\src\\\\feautures\\\\Crud-Forma\\\\productForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Segment, Form, Button } from 'semantic-ui-react';\nimport { v4 as uuid } from 'uuid';\nimport '../../app/layout/DashboardLayout/styles.css';\nimport agent from '../../app/API/agent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductForm = ({\n  setEditMode,\n  product: initialFormState,\n  editProduct,\n  createProduct\n}) => {\n  _s();\n\n  const initializeForm = () => {\n    if (initialFormState) {\n      return initialFormState;\n    } else {\n      return {\n        productId: '',\n        productName: '',\n        sector: '',\n        brand: '',\n        valueOfProduct: '',\n        modelYear: '',\n        quantity: '',\n        description: ''\n      };\n    }\n  };\n\n  const [product, setProduct] = useState(initializeForm);\n\n  const handleSubmit = () => {\n    if (product.productId.length === 0) {\n      let newProduct = { ...product,\n        productId: uuid()\n      };\n      createProduct(newProduct);\n    } else {\n      editProduct(product);\n    }\n  };\n\n  const [sectors, setSectors] = useState([]);\n  useEffect(() => {\n    agent.Sectors.sectorList().then(response => {\n      let sectors = [];\n      response.forEach(sector => {\n        sector.sectorName = sector.sectorName.split(\".\")[0];\n        sectors.push(sector);\n      });\n      setSectors(sectors);\n    });\n  }, []);\n  let SectorNames = sectors.map(sector => /*#__PURE__*/_jsxDEV(\"option\", {\n    children: sector.sectorName.split(\".\")\n  }, sector.sectorId, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this));\n\n  const handleSectorChange = ev => {\n    const {\n      value\n    } = ev.currentTarget;\n    setProduct({ ...product,\n      sector: value\n    });\n  };\n\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.currentTarget;\n    setProduct({ ...product,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Segment, {\n    clearing: true,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        onChange: handleInputChange,\n        name: \"productName\",\n        placeholder: \"Product Name\",\n        value: product.productName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleSectorChange,\n        children: /*#__PURE__*/_jsxDEV(\"option\", {\n          value: product.sector,\n          children: SectorNames\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        onChange: handleInputChange,\n        name: \"brand\",\n        placeholder: \"Brand Name\",\n        value: product.brand\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        onChange: handleInputChange,\n        name: \"valueOfProduct\",\n        type: \"numeber\",\n        step: \"0.01\",\n        placeholder: \"ValueOfProduct\",\n        value: product.valueOfProduct\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        onChange: handleInputChange,\n        name: \"modelYear\",\n        type: \"date\",\n        placeholder: \"Model Year\",\n        value: product.modelYear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        onChange: handleInputChange,\n        name: \"quantity\",\n        type: \"number\",\n        placeholder: \"Quantity\",\n        value: product.quantity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n        onChange: handleInputChange,\n        name: \"description\",\n        rows: 2,\n        placeholder: \"Description\",\n        value: product.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        floated: \"right\",\n        positive: true,\n        type: \"submit\",\n        content: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setEditMode(false),\n        floated: \"right\",\n        type: \"button\",\n        content: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProductForm, \"tcClTpcTj6CUMsJsLDN0xTpik4w=\");\n\n_c = ProductForm;\nexport default ProductForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductForm\");","map":{"version":3,"sources":["D:/Semestri-IV/Programim/Shop Management/client-app/src/feautures/Crud-Forma/productForm.tsx"],"names":["React","useState","useEffect","Segment","Form","Button","v4","uuid","agent","ProductForm","setEditMode","product","initialFormState","editProduct","createProduct","initializeForm","productId","productName","sector","brand","valueOfProduct","modelYear","quantity","description","setProduct","handleSubmit","length","newProduct","sectors","setSectors","Sectors","sectorList","then","response","forEach","sectorName","split","push","SectorNames","map","sectorId","handleSectorChange","ev","value","currentTarget","handleInputChange","event","name"],"mappings":"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","sourcesContent":["import React, { useState, FormEvent, useEffect, FormEventHandler } from 'react';\r\nimport { Segment, Form, Button, DropdownProps, Dropdown } from 'semantic-ui-react';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { IProduct } from '../../app/models/product';\r\nimport '../../app/layout/DashboardLayout/styles.css';\r\nimport { ISector } from '../../app/models/sector';\r\nimport agent from '../../app/API/agent';\r\nimport axios from 'axios';\r\nimport { event } from 'jquery';\r\nimport ProductList from '../Details/DashboardDetails/Product/ProductList';\r\n\r\ninterface IProps {\r\n  setEditMode: (editMode: boolean) => void;\r\n  product: IProduct;\r\n  createProduct: (product: IProduct) => void;\r\n  editProduct: (product: IProduct) => void;\r\n}\r\n\r\nconst ProductForm: React.FC<IProps> = ({\r\n  setEditMode,\r\n  product: initialFormState,\r\n  editProduct,\r\n  createProduct\r\n}) => {\r\n  const initializeForm = () => {\r\n    if (initialFormState) {\r\n      return initialFormState;\r\n    } else {\r\n      return {\r\n        productId: '',\r\n        productName: '',\r\n        sector: '',\r\n        brand: '',\r\n        valueOfProduct: '',\r\n        modelYear: '',\r\n        quantity: '',\r\n        description: ''\r\n        \r\n      };\r\n    }\r\n  };\r\n\r\n  const [product, setProduct] = useState<IProduct>(initializeForm);\r\n\r\n\r\n  const handleSubmit = () => {\r\n    if (product.productId.length === 0) {\r\n      let newProduct = {\r\n        ...product,\r\n        productId: uuid()\r\n      };\r\n      createProduct(newProduct);\r\n    } else {\r\n      editProduct(product);\r\n    }\r\n  };\r\n\r\n  const [sectors, setSectors] = useState<ISector[]>([]);\r\n\r\n  useEffect(() => {\r\n    agent.Sectors.sectorList()\r\n      .then((response) => {\r\n        let sectors: ISector[] = [];\r\n        response.forEach((sector) => {\r\n          sector.sectorName = sector.sectorName.split(\".\")[0];\r\n          sectors.push(sector);\r\n        });\r\n        setSectors(sectors);\r\n      });\r\n  }, []);\r\n  let SectorNames = sectors.map(sector =>(\r\n    <option key={sector.sectorId}>{sector.sectorName.split(\".\")}</option>\r\n  ))\r\n\r\n  \r\n\r\n  \r\n  const handleSectorChange =(\r\n    ev: FormEvent<HTMLSelectElement>\r\n    )=>{\r\n      const {value} = ev.currentTarget;\r\n      setProduct({...product,sector:value})\r\n    };\r\n  const handleInputChange  = (\r\n    event: FormEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { name, value } = event.currentTarget;\r\n    setProduct({ ...product, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <Segment clearing>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"productName\"\r\n          placeholder=\"Product Name\"\r\n          value={product.productName}\r\n        />\r\n          <select onChange={handleSectorChange}>\r\n            <option value={product.sector}>{SectorNames}</option>\r\n          </select>\r\n        \r\n\r\n\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"brand\"\r\n          placeholder=\"Brand Name\"\r\n          value={product.brand}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"valueOfProduct\"\r\n          type=\"numeber\"\r\n          step=\"0.01\"\r\n          placeholder=\"ValueOfProduct\"\r\n          value={product.valueOfProduct}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"modelYear\"\r\n          type=\"date\"\r\n          placeholder=\"Model Year\"\r\n          value={product.modelYear}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"quantity\"\r\n          type=\"number\"\r\n          placeholder=\"Quantity\"\r\n          value={product.quantity}\r\n        />\r\n        <Form.TextArea\r\n          onChange={handleInputChange}\r\n          name=\"description\"\r\n          rows={2}\r\n          placeholder=\"Description\"\r\n          value={product.description}\r\n        />\r\n        <Button floated=\"right\" positive type=\"submit\" content=\"Submit\" />\r\n        <Button\r\n          onClick={() => setEditMode(false)}\r\n          floated=\"right\"\r\n          type=\"button\"\r\n          content=\"Cancel\"\r\n        />\r\n      </Form>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default ProductForm;\r\n"]},"metadata":{},"sourceType":"module"}